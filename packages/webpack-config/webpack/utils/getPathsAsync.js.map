{"version":3,"file":"getPathsAsync.js","sourceRoot":"","sources":["../../src/utils/getPathsAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path';\nimport findWorkspaceRoot from 'find-yarn-workspace-root';\nimport fs from 'fs';\nimport ConfigUtils from '@expo/config';\nimport { Environment, FilePaths } from '../types';\n\nconst possibleMainFiles = [\n  'index.web.ts',\n  'index.ts',\n  'index.web.tsx',\n  'index.tsx',\n  'src/index.web.ts',\n  'src/index.ts',\n  'src/index.web.tsx',\n  'src/index.tsx',\n  'index.web.js',\n  'index.js',\n  'index.web.jsx',\n  'index.jsx',\n  'src/index.web.js',\n  'src/index.js',\n  'src/index.web.jsx',\n  'src/index.jsx',\n];\n\nconst appDirectory = fs.realpathSync(process.cwd());\n\nasync function getPathsAsync({ locations, projectRoot }: Environment): Promise<FilePaths> {\n  // Recycle locations\n  if (locations) {\n    return locations;\n  }\n  const inputProjectRoot = projectRoot || appDirectory;\n\n  function absolute(...pathComponents: string[]) {\n    return path.resolve(inputProjectRoot, ...pathComponents);\n  }\n\n  const absoluteProjectRoot = absolute();\n\n  function findMainFile() {\n    for (const fileName of possibleMainFiles) {\n      const filePath = absolute(fileName);\n      if (fs.existsSync(filePath)) {\n        return filePath;\n      }\n    }\n    return null;\n  }\n\n  function getModulesPath() {\n    const workspaceRoot = findWorkspaceRoot(absoluteProjectRoot); // Absolute path or null\n    if (workspaceRoot) {\n      return path.resolve(workspaceRoot, 'node_modules');\n    } else {\n      return absolute('node_modules');\n    }\n  }\n\n  const { exp: nativeAppManifest, pkg } = await ConfigUtils.readConfigJsonAsync(projectRoot);\n\n  const packageJsonPath = absolute('package.json');\n  const modulesPath = getModulesPath();\n\n  /**\n   *  The main file is resolved like so:\n   * * `app.json` -> `expo.entryPoint`\n   * * `package.json` -> `\"main\"`\n   * * `possibleMainFiles`\n   */\n  let appMain;\n  if (nativeAppManifest.entryPoint) {\n    appMain = nativeAppManifest.entryPoint;\n  } else {\n    const { main } = pkg;\n    if (!main) {\n      // Adds support for create-react-app (src/index.js) and react-native-cli (index.js) which don't define a main.\n      appMain = findMainFile();\n      if (!appMain) {\n        throw new Error(\n          'Could not determine the main file in your project (index, src/index). Please define it with the `main` field in your `package.json`'\n        );\n      }\n    } else {\n      appMain = main;\n    }\n  }\n\n  const config = ConfigUtils.ensurePWAConfig(nativeAppManifest);\n\n  const productionPath = absolute(config.web.build.output);\n\n  function templatePath(filename = '') {\n    const overridePath = absolute('web', filename);\n    if (fs.existsSync(overridePath)) {\n      return overridePath;\n    } else {\n      return path.join(__dirname, '../../web-default', filename);\n    }\n  }\n\n  function getProductionPath(...props: string[]) {\n    return path.resolve(productionPath, ...props);\n  }\n\n  function getIncludeModule(...pathComponents: string[]) {\n    return path.resolve(modulesPath, ...pathComponents);\n  }\n\n  return {\n    absolute,\n    includeModule: getIncludeModule,\n    packageJson: packageJsonPath,\n    root: absoluteProjectRoot,\n    appMain: absolute(appMain),\n    modules: modulesPath,\n    template: {\n      get: templatePath,\n      folder: templatePath(),\n      indexHtml: templatePath('index.html'),\n      manifest: templatePath('manifest.json'),\n      serveJson: templatePath('serve.json'),\n      favicon: templatePath('favicon.ico'),\n    },\n    production: {\n      get: getProductionPath,\n      folder: getProductionPath(),\n      indexHtml: getProductionPath('index.html'),\n      manifest: getProductionPath('manifest.json'),\n      serveJson: getProductionPath('serve.json'),\n      favicon: getProductionPath('favicon.ico'),\n    },\n  };\n}\n\nexport default getPathsAsync;\n"]}